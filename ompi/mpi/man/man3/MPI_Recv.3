.\"Copyright 2006, Sun Microsystems, Inc. All rights reserved. Use is subject to license terms.
.\" Copyright (c) 1996 Thinking Machines Corporation
.TH MPI_Recv 3OpenMPI "September 2006" "Open MPI 1.2" " "
.SH NAME
\fBMPI_Recv\fP \- Basic receive.

.SH SYNTAX
.ft R
.SH C Syntax
.nf
#include <mpi.h>
int MPI_Recv(void *\fIbuf\fP, int\fI count\fP, MPI_Datatype\fI datatype\fP, 
	int\fI source\fP, int\fI tag\fP, MPI_Comm\fI comm\fP, MPI_Status\fI *status\fP)

.SH Fortran Syntax
.nf
INCLUDE 'mpif.h'
MPI_RECV(\fIBUF, COUNT, DATATYPE, SOURCE, TAG, COMM, STATUS, IERROR\fP)
	<type>	\fIBUF\fP(*) 
	INTEGER	\fICOUNT, DATATYPE, SOURCE, TAG, COMM\fP 
	INTEGER	\fISTATUS(MPI_STATUS_SIZE), IERROR\fP

.SH C++ Syntax
.nf
#include <mpi.h>
void Comm::Recv(void* \fIbuf\fP, int \fIcount\fP, const Datatype& \fIdatatype\fP, 
	int \fIsource\fP, int \fItag\fP, Status& \fIstatus\fP) const

void Comm::Recv(void* \fIbuf\fP, int \fIcount\fP, const Datatype& \fIdatatype\fP, 
	int \fIsource\fP, int \fItag\fP) const 

.SH INPUT PARAMETERS
.ft R
.TP 1i
count
Maximum number of elements to receive (integer).
.TP 1i
datatype
Datatype of each receive buffer entry (handle).
.TP 1i
source
Rank of source (integer).
.TP 1i
tag
Message tag (integer).
.TP 1i
comm
Communicator (handle).

.SH OUTPUT PARAMETERS
.ft R
.TP 1i
buf
Initial address of receive buffer (choice).
.TP 1i
status
Status object (status).
.ft R
.TP 1i
IERROR
Fortran only: Error status (integer). 

.SH DESCRIPTION
.ft R
This basic receive operation, MPI_Recv, is blocking: it returns only after the receive buffer contains the newly received message. A receive can complete before the matching send has completed (of course, it can complete only after the matching send has started).
.sp
The blocking semantics of this call are described in Section 3.4 of the MPI-1 Standard, "Communication Modes."
.sp
The receive buffer consists of the storage containing \fIcount\fP consecutive elements of the type specified by \fIdatatype\fP, starting at \fIaddress_buf\fP. The length of the received message must be less than or equal to the length of the receive buffer. An overflow error occurs if all incoming data does not fit, without truncation, into the receive buffer.
.sp
If a message that is shorter than the receive buffer arrives, then only
those locations corresponding to the (shorter) message are modified.

.SH NOTES
The \fIcount\fP argument indicates the maximum number of entries of type \fIdatatype\fP to be received of a message; once the message is received, the actual
number can be determined with MPI_Get_count.
.sp
The MPI_Probe function can be used to receive messages of unknown length. (For more information about MPI_Probe and MPI_Cancel, see their respective man pages; also, see Section 3.8 of the MPI-1 Standard, "Probe and Cancel.") 
.sp
The selection of a message by a receive operation is governed by the value of the message envelope. A message can be received by a receive operation if its envelope matches the source, tag, and comm values specified by the receive operation. The receiver may specify a wildcard MPI_ANY_SOURCE value for source, and/or a wildcard MPI_ANY_TAG value for tag, indicating that any source and/or tag are acceptable. The scope of such a wildcard is limited to the processes in the group of the specified communicator. It cannot specify a wildcard value for comm. Thus, a message can be received by a receive operation only if it is addressed to the receiving process, has a matching communicator, has matching source unless source = MPI_ANY_SOURCE in the pattern, and has a matching tag unless tag = MPI_ANY_TAG in the pattern.  
.sp
The message tag is specified by the tag argument of the receive operation. The argument source, if different from MPI_ANY_SOURCE, is specified as a rank within the process group associated with that same communicator (remote process group, for intercommunicators). Thus, the range of valid values for the source argument is {0,...,n-1} {MPI_ANY_SOURCE}, where n is the number of processes in this group. 
.sp
Note the asymmetry between send and receive operations: A receive operation may accept messages from an arbitrary sender; on the other hand, a send operation must specify a unique receiver. This matches a "push" communication mechanism, where data transfer is effected by the sender (rather than a "pull" mechanism, where data transfer is effected by the receiver). 
.sp
Source = destination is allowed, that is, a process can send a message to itself. (However, it is unsafe to do so with the blocking send and receive operations described above, since this may lead to deadlock. See Section 3.5 of the MPI-1 Standard, "Semantics of Point-to-Point Communication.") 
.sp
If your application does not need to examine the \fIstatus\fP field, you can save resources by using the predefined constant MPI_STATUS_IGNORE as a special value for the \fIstatus\fP argument. 

.SH ERRORS
Almost all MPI routines return an error value; C routines as the value of the function and Fortran routines in the last argument. C++ functions do not return errors. If the default error handler is set to MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism will be used to throw an MPI:Exception object.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for I/O function errors. The error handler may be changed with MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN may be used to cause error values to be returned. Note that MPI does not guarantee that an MPI program can continue past an error.  

' @(#)MPI_Recv.3 1.20 06/03/09   


