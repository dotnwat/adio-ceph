#!/bin/sh
#
# Self-contained configure script, that does not rely
# on cross-compilation, aka no need for a platforms-file.
#
# If the below env flags are not set, initialize to default (gcc, std dir on Jaguar)...
# This file works stand-alone, but is also integrated into the NCCS swtools environment
#

# Compilation should be done as VPATH
if [ -d .svn -o -f AUTHORS ] ; then
    echo WARNING: Should not compile in source directory
    echo Please create a directory and adapt SRCDIR in this script
    return
fi

FLAG=0
[[ -z ${XTOS_VERSION} ]] && echo "XTOS_VERSION is not set.  Please load the xt-os module" && FLAG=1
[[ -z ${CATAMOUNT_DIR} ]] && echo "CATAMOUNT_DIR is not set.  Please load the xt-catamount module" && FLAG=1
[[ -z ${PE_DIR} ]] && echo "PE_DIR is not set.  Please load the xt-pe module" && FLAG=1
[[ -z ${SE_DIR} ]] && echo "SE_DIR is not set.  Please load the xt-service module" && FLAG=1
[[ -z ${MPT_DIR} ]] && echo "MPT_DIR is not set.  Please load the xt-mpt module" && FLAG=1
[[ -z ${PE_ENV} ]] && echo "PE_ENV is not set.  Please load the PrgEnv module" && FLAG=1

if [ $FLAG -eq 1 ] ; then
    echo -n "One of the modules was not properly loaded (might want to CTRL-C)."
    sleep 1 ; echo -n "."
    sleep 1 ; echo -n "."
    sleep 1 ; echo -n "."
    sleep 1 ; echo "."
fi


###################################################################

# If the env flags are not set, initialize to default...
SRCDIR=${SRCDIR:-..}
COMPILER=${COMPILER:-gnu}
INSTALL_ROOT=${INSTALL_ROOT:-/sw/xt5/ompi}
VERSION=${VERSION:-"`${SRCDIR}/config/ompi_get_version.sh ${SRCDIR}/VERSION`"}
SVER=${SVER:-"cnl`echo "${XTOS_VERSION}" | cut -c1-3`"}
CVER=${CVER:-"${COMPILER}`gcc --version  | awk '/gcc/{print $3}'`"}

# The following is all derived
PREFIX=${PREFIX:-${INSTALL_ROOT}/${VERSION}/${SVER}_${CVER}}
###################################################################

case "$COMPILER" in
    "cray" )
        ADD_COMPILER="CC=craycc CXX=crayc++ F77=crayftn FC=crayftn"
        # Static compilation is the default, there is not even a flag...
        ADD_WRAPPER_LDFLAGS=""
        ;;
    "gnu" )
        ADD_WRAPPER_LDFLAGS="-static "
        ;;
    "intel" )
        ADD_COMPILER="CC=icc CXX=icpc F77=ifort FC=ifort"
        ADD_WRAPPER_LDFLAGS="-static "
        ;;
    "pathscale" )
        ADD_COMPILER="CC=pathcc CXX=pathCC F77=pathf90 FC=pathf90"
        ADD_WRAPPER_LDFLAGS="-static "
        ;;
    "pgi" )
        ADD_COMPILER="CC=pgcc CXX=pgCC F77=pgf77 FC=pgf90"
        ADD_FFLAGS="-Mnomain $PGI/linux86-64/default/lib/pgfmain.o "
        ADD_FCFLAGS="-Mnomain $PGI/linux86-64/default/lib/pgfmain.o "
        ADD_LDFLAGS="-L$PGI/linux86-64/default/lib "
        ADD_WRAPPER_LDFLAGS="-Bstatic "
        ;;
    * )
        echo "Error: Unknown Compiler: $COMPILER"
        return
        ;;
esac

$SRCDIR/configure \
   --prefix=$PREFIX \
   --enable-static --disable-shared --disable-dlopen --disable-pretty-print-stacktrace --disable-pty-support \
   --with-threads --with-memory-manager=none \
   --without-tm --with-alps --with-portals --with-portals-config=cnl_modex \
   --enable-mca-no-build=timer-catamount,maffinity-first_use,maffinity-libnuma,ess-cnos,filem-rsh,grpcomm-cnos,pml-dr \
   --with-wrapper-ldflags="${ADD_WRAPPER_LDFLAGS}-L${PE_DIR}/lib/snos64 -L${SE_DIR}/lib/snos64 -L${MPT_DIR}/util/lib" \
   --with-wrapper-libs="-lpct -lalpslli -lalpsutil -lportals -lpthread -lm" \
   ${ADD_COMPILER} \
   CPPFLAGS="${ADD_CPPFLAGS}-I${CATAMOUNT_DIR}/catamount/linux/include -I${PE_DIR}/include" \
   FFLAGS="${ADD_FFLAGS}-I${PE_DIR}/include" \
   FCFLAGS="${ADD_FCFLAGS}-I${PE_DIR}/include" \
   LDFLAGS="${ADD_LDFLAGS}-L${PE_DIR}/lib/snos64 -L${SE_DIR}/lib/snos64 -L${MPT_DIR}/util/lib" \
   LIBS="${ADD_LIBS}-lrt -lpct -lalpslli -lalpsutil -lportals -lpthread -lm" | tee build.log

#
# To build orted static, use the libtool-flag -all-static
#
make -s -j4 orted_LDFLAGS=-all-static all | tee -a build.log

make -s orted_LDFLAGS=-all-static install | tee -a install.log

